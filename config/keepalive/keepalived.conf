global_defs {
   # 报警邮箱列表
   notification_email {
     jihongrui@allcmd.com
     jihongrui@hotmail.com
   }

   # 指定发件人
   notification_email_from  jihongrui@beyondcent.com
   # SMTP Server
   smtp_server smtp.exmail.qq.com  
   smtp_connect_timeout 30
   # 不发送email
   no_email_faults 
   # (default: local host name)
   router_id master.164
}


vrrp_script checkwebservices {
    # 检测脚本, chmod +x /etc/keepalived/check_services.sh
#    script "/usr/bin/curl -i -s localhost:32801/devops-deployer/"
   # script "exit 1"
    script "/etc/keepalived/check.sh"
#    script " influx -host 'localhost' -port '8086' -username 'bocloud' -password 'bocloud' -execute 'show users' &&  curl -i http://localhost:9092/kapacitor/v1/tasks"
    # 以秒为单位 
    interval 30

    # 脚本执行超时时间
    timeout 3

    # 权重 <-254 --- 254>：调整优先级。默认为2
    #解释：
    #    weight： 
    #    1. 如果脚本执行成功(退出状态码为0)，weight大于0，则priority增加。
    #    2. 如果脚本执行失败(退出状态码为非0)，weight小于0，则priority减少。
    #    3. 其他情况下，priority不变。
    weight -10
    
    # <INTEGER>：执行失败多少次才认为失败。
    fall 3

    # <INTEGER>：执行成功多少次才认为是成功。
    rise 2

    # <USERNAME> [GROUPNAME]：运行脚本的用户和组。
    user root
    
    # ：假设脚本初始状态是失败状态。
    init_fail
}

# ubocweb 这里名可以自定义
vrrp_instance ubocweb {

    # route id 不要和其它重复
    # arbitrary unique number from 0 to 255
    virtual_router_id 206

    # state MASTER / BACKUP 
    # 这里定义不算特别重要, 主要还是靠priority + weight 决定
    state BACKUP

    # 指定优先级，优先级高的将成为MASTER。
    priority 100

    # inside_network的接口，由vrrp绑定
    # 如果有多个网卡,  最好使用单独网卡
    interface ens192

    # 指定发送组播数据包的源IP地址。默认是绑定VRRP实例的接口的主IP地址。
    mcast_src_ip 10.19.38.164

    # ：指定发送单薄数据包的源IP地址。默认是绑定VRRP实例的接口的主IP地址。
    unicast_src_ip 10.19.38.164

    # 采用单播的方式发送VRRP通告，指定单播邻居的IP地址。
    unicast_peer {
        10.19.38.154
    }

    # 通过基本接口向外发送和接收VRRP数据包，而不是通过VMAC接口。
    vmac_xmit_base
    # VRRP广告时间间隔（以秒为单位）
    advert_int 1

    # 当有多个网卡时, 需要此选项
    # ：如果track的接口有任何一个出现故障，都会进入FAULT状态。
    # track_interface {
    # eth0
    # eth1 weight <-254-254>
    # }

    # 设置是否抢占
    # 设置为不抢占。默认是抢占的，当高优先级的机器恢复后，会抢占低优先级的机器成为MASTER，而不抢占，
    # 则允许低优先级的机器继续成为MASTER，即使高优先级的机器已经上线。
    # 如果要使用这个功能，则初始化状态必须为BACKUP。
    nopreempt

    # ：设置抢占延迟。单位是秒，范围是0---1000，默认是0.发现低优先级的MASTER后多少秒开始抢占。
    preempt_delay 0

    # 2|3：指定该实例所使用的VRRP版本。
    version 3

    # 认证
    authentication {
        # 指定认证方式。PASS简单密码认证(推荐)
        auth_type PASS  
        # 指定认证所使用的密码。最多8位。
        auth_pass -Pl,0okm
    }


    # 指定VIP地址。
    # <IPADDR>/<MASK> brd <IPADDR> dev <STRING> scope <SCOPE> label <LABEL>
    # 192.168.200.17/24 dev eth1
    # 192.168.200.18/24 dev eth2 label eth2:1
    virtual_ipaddress {
        10.19.38.206/24 dev ens192
    }

    # 原理和virtual ipaddress一样，只不过这里是增加和删除路由
    # src <IPADDR> [to] <IPADDR>/<MASK> via|gw <IPADDR> dev <STRING> scope <SCOPE> tab
    # src 192.168.100.1 to 192.168.109.0/24 via 192.168.200.254 dev eth1
    # 192.168.110.0/24 via 192.168.200.254 dev eth1
    # 192.168.111.0/24 dev eth2
    # 192.168.112.0/24 via 192.168.100.254
    #virtual_routes {
    #    src 192.168.1.112 to 192.168.4.169/32  dev ens160
    #}
    # ：添加一个track脚本(vrrp_script配置的脚本。)
    track_script {
        checkwebservices
        # 可在这里直接配置权重
        # checkdbservices weight -50 
    }

    
    #notify_master "/etc/keepalived/master.sh &>> /var/log/keepalived_status.log"
    #notify_backup "/etc/keepalived/backup.sh &>> /var/log/keepalived_status.log"
    #notify_stop "/etc/keepalived/badkup.sh &>> /var/log/keepalived_status.log"


    # # notify scripts, alert as above 通知脚本，如上警告
    # notify_master <STRING>|<QUOTED-STRING> [username [groupname]]
    # notify_backup <STRING>|<QUOTED-STRING> [username [groupname]]
    # notify_fault <STRING>|<QUOTED-STRING> [username [groupname]]
    # # executed when stopping vrrp # 当停止VRRP时执行的脚本。
    # notify_stop <STRING>|<QUOTED-STRING> [username [groupname]]
    # notify <STRING>|<QUOTED-STRING> [username [groupname]]
}

